basePath: /
definitions:
  controllers.InvoiceViewFormat:
    properties:
      invoice_id:
        type: string
      order_details: {}
      order_id:
        type: string
      payment_due: {}
      payment_due_date:
        type: string
      payment_method:
        type: string
      payment_status:
        type: string
      table_number: {}
    type: object
  models.Food:
    properties:
      created_at:
        type: string
      food_id:
        type: string
      food_image:
        type: string
      id:
        type: string
      menu_id:
        type: string
      name:
        type: string
      price:
        type: number
      updated_at:
        type: string
    required:
    - food_image
    - menu_id
    - name
    - price
    type: object
  models.Invoice:
    properties:
      created_at:
        type: string
      id:
        type: string
      invoice_id:
        type: string
      order_id:
        type: string
      payment_due_date:
        type: string
      payment_method:
        type: string
      payment_status:
        type: string
      updated_at:
        type: string
    required:
    - order_id
    - payment_method
    - payment_status
    type: object
  models.Menu:
    properties:
      category:
        type: string
      created_at:
        type: string
      end_date:
        type: string
      id:
        type: string
      menu_id:
        type: string
      name:
        type: string
      start_date:
        type: string
      updated_at:
        type: string
    required:
    - category
    - name
    type: object
  models.Order:
    properties:
      created_at:
        type: string
      id:
        type: string
      order_date:
        type: string
      order_id:
        type: string
      table_id:
        type: string
      updated_at:
        type: string
    required:
    - order_date
    - table_id
    type: object
  models.OrderItem:
    properties:
      created_at:
        type: string
      food_id:
        type: string
      id:
        type: string
      order_id:
        type: string
      order_item_id:
        type: string
      quantity:
        description: s- small , m- medium . L -large
        type: string
      unit_price:
        type: number
      updated_at:
        type: string
    required:
    - food_id
    - quantity
    - unit_price
    type: object
  models.Table:
    properties:
      created_at:
        type: string
      id:
        type: string
      number_of_guests:
        type: integer
      table_id:
        type: string
      table_number:
        type: integer
      updated_at:
        type: string
    required:
    - number_of_guests
    - table_number
    type: object
  models.User:
    properties:
      avatar:
        type: string
      created_at:
        type: string
      email:
        type: string
      first_name:
        maxLength: 100
        minLength: 2
        type: string
      id:
        type: string
      last_name:
        maxLength: 100
        minLength: 2
        type: string
      password:
        minLength: 6
        type: string
      phone:
        type: string
      refresh_token:
        type: string
      token:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - phone
    type: object
host: localhost:8000
info:
  contact: {}
  description: CRUP api's for go backend
  title: go-backend
  version: "1.0"
paths:
  /foods:
    get:
      description: Returns an array of foods from the ordercollection in restaurent
        database.
      produces:
      - application/json
      responses:
        "200":
          description: slice of orders
          schema:
            items:
              $ref: '#/definitions/models.Food'
            type: array
      security:
      - Security.require(true): []
      summary: Returns slice of foods
      tags:
      - foods
    post:
      consumes:
      - application/json
      description: Creates a food resource on the server
      parameters:
      - description: Food object
        in: body
        name: food
        required: true
        schema:
          $ref: '#/definitions/models.Food'
      produces:
      - application/json
      responses:
        "201":
          description: New food created
          schema:
            $ref: '#/definitions/models.Food'
        "500":
          description: Internal Server Error while creating a new food
          schema:
            type: string
      security:
      - Security.require(true): []
      summary: Creates a food  resource
      tags:
      - foods
  /foods/{food_id}:
    get:
      consumes:
      - application/json
      description: Retrieves  a  food with specific food id from the  orders collection
      parameters:
      - description: food_id
        in: path
        name: food_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Details of a speicific food
          schema:
            $ref: '#/definitions/models.Food'
        "500":
          description: Internal Server Error in mongodb
          schema:
            type: string
      security:
      - Security.require(true): []
      summary: Retrieves a food with specific food id
      tags:
      - foods
    patch:
      consumes:
      - application/json
      description: Updates an existing fodd  resource in the foods collection
      parameters:
      - description: ID of the food resource to update
        in: path
        name: food_id
        required: true
        type: string
      - description: Food object
        in: body
        name: food
        required: true
        schema:
          $ref: '#/definitions/models.Food'
      produces:
      - application/json
      responses:
        "200":
          description: food got updated with new body
          schema:
            $ref: '#/definitions/models.Food'
        "404":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error while updating food
          schema:
            type: string
      security:
      - Security.require(true): []
      summary: Updates an food  resource
      tags:
      - foods
  /home:
    get:
      description: Returns home page with introduction and guide
      produces:
      - text/html
      responses:
        "200":
          description: HTML content
          schema:
            type: string
      summary: Returns home page
  /invoices:
    get:
      description: Returns an array of invoices from the invoiceCollection in restaurent
        database.
      produces:
      - application/json
      responses:
        "200":
          description: 'slice of invoices '
          schema:
            items:
              $ref: '#/definitions/models.Invoice'
            type: array
      security:
      - Security.require(true): []
      summary: Returns slice of invoices
      tags:
      - invoice
    post:
      consumes:
      - application/json
      description: Creates a invoice resource on the server
      parameters:
      - description: Invoice object
        in: body
        name: Invoice
        required: true
        schema:
          $ref: '#/definitions/models.Invoice'
      produces:
      - application/json
      responses:
        "201":
          description: New invoice created
          schema:
            $ref: '#/definitions/models.Invoice'
        "500":
          description: Internal Server Error while creating a new food
          schema:
            type: string
      security:
      - Security.require(true): []
      summary: Creates a invoice
      tags:
      - invoice
  /invoices/{invoice_id}:
    get:
      consumes:
      - application/json
      description: Retrieves a invoice  with specific inovoice  id from the  invoices
        collection
      parameters:
      - description: invoice_id
        in: path
        name: invoice_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Details of a specific invoice created
          schema:
            $ref: '#/definitions/controllers.InvoiceViewFormat'
        "500":
          description: Internal Server Error in mongodb
          schema:
            type: string
      security:
      - Security.require(true): []
      summary: Retrieves a invoice  with specific invoice id
      tags:
      - invoice
    patch:
      consumes:
      - application/json
      description: Updates an existing invoice  resource in the invoices collection
      parameters:
      - description: ID of the invoice resource to update
        in: path
        name: invoice_id
        required: true
        type: string
      - description: Invoice object
        in: body
        name: Invoice
        required: true
        schema:
          $ref: '#/definitions/models.Invoice'
      produces:
      - application/json
      responses:
        "200":
          description: invoice got updated with new body
          schema:
            $ref: '#/definitions/models.Invoice'
        "404":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error while updating invoice
          schema:
            type: string
      security:
      - Security.require(true): []
      summary: Updates an invoice resource
      tags:
      - invoice
  /menu/{menu_id}:
    patch:
      consumes:
      - application/json
      description: Updates an existing menu resource in the menu collection
      parameters:
      - description: ID of the menu resource to update
        in: path
        name: menu_id
        required: true
        type: string
      - description: Menu object
        in: body
        name: Menu
        required: true
        schema:
          $ref: '#/definitions/models.Menu'
      produces:
      - application/json
      responses:
        "200":
          description: menu got updated with new body
          schema:
            $ref: '#/definitions/models.Menu'
        "404":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error while updating food
          schema:
            type: string
      security:
      - Security.require(true): []
      summary: Updates an menu resource
      tags:
      - menu
  /menus:
    get:
      description: Returns an array of menus from the menucollection in restaurent
        database.
      produces:
      - application/json
      responses:
        "200":
          description: 'slice of menus '
          schema:
            items:
              $ref: '#/definitions/models.Menu'
            type: array
      security:
      - Security.require(true): []
      summary: Returns slice of menus
      tags:
      - menu
    post:
      consumes:
      - application/json
      description: Creates a menu resource on the server
      parameters:
      - description: Menu object
        in: body
        name: Menu
        required: true
        schema:
          $ref: '#/definitions/models.Menu'
      produces:
      - application/json
      responses:
        "201":
          description: New menu created
          schema:
            $ref: '#/definitions/models.Menu'
        "500":
          description: Internal Server Error while creating a new menu
          schema:
            type: string
      security:
      - Security.require(true): []
      summary: Creates a new menu
      tags:
      - menu
  /menus/{menu_id}:
    get:
      consumes:
      - application/json
      description: Retrieves a menu with specific menu id from the menu collection
      parameters:
      - description: menu_id
        in: path
        name: menu_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Details of a specific menu
          schema:
            $ref: '#/definitions/models.Menu'
        "500":
          description: Internal Server Error in mongodb
          schema:
            type: string
      security:
      - Security.require(true): []
      summary: Retrieves a menu  with specific menu id
      tags:
      - menu
  /orderitems:
    get:
      description: Returns an array of orderitems placed  from the orderitemcollection
        in restaurent database.
      produces:
      - application/json
      responses:
        "200":
          description: 'slice of orderitems '
          schema:
            items:
              $ref: '#/definitions/models.OrderItem'
            type: array
      security:
      - Security.require(true): []
      summary: Returns slice of orderitems
      tags:
      - orderitem
    post:
      consumes:
      - application/json
      description: Creates a new orderitem resource on the server
      parameters:
      - description: Orderitem object
        in: body
        name: orderitme
        required: true
        schema:
          $ref: '#/definitions/models.OrderItem'
      produces:
      - application/json
      responses:
        "201":
          description: New orderitem created
          schema:
            $ref: '#/definitions/models.OrderItem'
        "500":
          description: Internal Server Error while creating a new orderitem
          schema:
            type: string
      security:
      - Security.require(true): []
      summary: Creates a orderitem  resource
      tags:
      - orderitem
  /orderitems/{orderitem_id}:
    get:
      consumes:
      - application/json
      description: Retrieves a orderitem with specific orderitem id from the orderitem
        collection
      parameters:
      - description: orderitem_id
        in: path
        name: orderitem_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Details of a specific orderitem id
          schema:
            $ref: '#/definitions/models.OrderItem'
        "500":
          description: Internal Server Error in mongodb
          schema:
            type: string
      security:
      - Security.require(true): []
      summary: Retrieves a orderitem with specific orderitem id
      tags:
      - orderitem
    patch:
      consumes:
      - application/json
      description: Updates an existing orderitem resource in the orderitem collection
      parameters:
      - description: ID of the orderitem  resource to update
        in: path
        name: orderitem_id
        required: true
        type: string
      - description: Orderitem object
        in: body
        name: orderitme
        required: true
        schema:
          $ref: '#/definitions/models.OrderItem'
      produces:
      - application/json
      responses:
        "200":
          description: orderitem  got updated with new body
          schema:
            $ref: '#/definitions/models.OrderItem'
        "404":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error while updating food
          schema:
            type: string
      security:
      - Security.require(true): []
      summary: Updates an oderitem resource
      tags:
      - orderitem
  /orderitemsorder/{order_id}:
    get:
      consumes:
      - application/json
      description: Retrieves orderitems placed from the specific order
      parameters:
      - description: order_id
        in: path
        name: order_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: retrieves orderitems placed from specific orderid
          schema:
            $ref: '#/definitions/models.OrderItem'
        "500":
          description: Internal Server Error in mongodb
          schema:
            type: string
      security:
      - Security.require(true): []
      summary: Retrieves orderitems placed from the specific order
      tags:
      - orderitem
  /orders:
    get:
      description: Returns an array of orders placed from the ordercollection in restaurent
        database.
      produces:
      - application/json
      responses:
        "200":
          description: 'slice of orders '
          schema:
            items:
              $ref: '#/definitions/models.Order'
            type: array
      security:
      - Security.require(true): []
      summary: Returns slice of orders
      tags:
      - order
    post:
      consumes:
      - application/json
      description: Creates a order resource on the server
      parameters:
      - description: Order object
        in: body
        name: Order
        required: true
        schema:
          $ref: '#/definitions/models.Order'
      produces:
      - application/json
      responses:
        "201":
          description: New order created
          schema:
            $ref: '#/definitions/models.Order'
        "500":
          description: Internal Server Error while creating a new order
          schema:
            type: string
      security:
      - Security.require(true): []
      summary: Creates a order  resource
      tags:
      - order
  /orders/{order_id}:
    get:
      consumes:
      - application/json
      description: Retrieves a order with specific order id from the orders collection
      parameters:
      - description: order_id
        in: path
        name: order_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Details of a specific order
          schema:
            $ref: '#/definitions/models.Order'
        "500":
          description: Internal Server Error in mongodb
          schema:
            type: string
      security:
      - Security.require(true): []
      summary: Retrieves a order with specific order id
      tags:
      - order
    patch:
      consumes:
      - application/json
      description: Updates an existing order resource in the orders collection
      parameters:
      - description: ID of the order resource to update
        in: path
        name: order_id
        required: true
        type: string
      - description: Order object
        in: body
        name: Order
        required: true
        schema:
          $ref: '#/definitions/models.Order'
      produces:
      - application/json
      responses:
        "200":
          description: orders got updated with new body
          schema:
            $ref: '#/definitions/models.Order'
        "404":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error while updating order
          schema:
            type: string
      security:
      - Security.require(true): []
      summary: Updates an order  resource
      tags:
      - order
  /tables:
    get:
      description: Returns an array of tables placed from table collectios in restaurent
        database.
      produces:
      - application/json
      responses:
        "200":
          description: 'slice of tables '
          schema:
            items:
              $ref: '#/definitions/models.Table'
            type: array
      security:
      - Security.require(true): []
      summary: Returns slice of tables
      tags:
      - table
    post:
      consumes:
      - application/json
      description: Creates a new table resource on the server
      parameters:
      - description: Table object
        in: body
        name: table
        required: true
        schema:
          $ref: '#/definitions/models.Table'
      produces:
      - application/json
      responses:
        "201":
          description: New table created
          schema:
            $ref: '#/definitions/models.Table'
        "500":
          description: Internal Server Error while creating a new table
          schema:
            type: string
      security:
      - Security.require(true): []
      summary: Creates a table  resource
      tags:
      - table
  /tables/{table_id}:
    get:
      consumes:
      - application/json
      description: Retrieves a table with specific table id from the tables collection
      parameters:
      - description: table_id
        in: path
        name: table_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: table details of specific userid
          schema:
            $ref: '#/definitions/models.Table'
        "500":
          description: Internal Server Error in mongodb
          schema:
            type: string
      security:
      - Security.require(true): []
      summary: Retrieves a table  with specific table id
      tags:
      - table
    patch:
      consumes:
      - application/json
      description: Updates an existing table resource in the table collection
      parameters:
      - description: ID of the table resource to update
        in: path
        name: table_id
        required: true
        type: string
      - description: Table object
        in: body
        name: table
        required: true
        schema:
          $ref: '#/definitions/models.Table'
      produces:
      - application/json
      responses:
        "200":
          description: table got updated with new body
          schema:
            $ref: '#/definitions/models.Table'
        "404":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error while updating table
          schema:
            type: string
      security:
      - Security.require(true): []
      summary: Updates an table resource
      tags:
      - table
  /user/login:
    post:
      consumes:
      - application/json
      description: User gets logged in
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: 'User logged in '
          schema:
            $ref: '#/definitions/models.User'
        "500":
          description: Internal Server Error while logging  a new user
          schema:
            type: string
      summary: Creates a new login for a user
      tags:
      - user
  /users:
    get:
      description: Returns an array of users placed from the users collection  in
        restaurent database.
      produces:
      - application/json
      responses:
        "200":
          description: 'slice of tables '
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      summary: Returns slice of users
      tags:
      - user
  /users/{user_id}:
    get:
      consumes:
      - application/json
      description: Retrieves a user with specific user id from the users collection
      parameters:
      - description: user_id
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Details of user with specific user_id
          schema:
            $ref: '#/definitions/models.User'
        "500":
          description: Internal Server Error in mongodb
          schema:
            type: string
      summary: Retrieves a user with specific user id
      tags:
      - user
  /users/signup:
    post:
      consumes:
      - application/json
      description: Creates a new users resource on the server
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: New user created
          schema:
            $ref: '#/definitions/models.User'
        "500":
          description: Internal Server Error while creating a new user
          schema:
            type: string
      summary: Creates a new resource
      tags:
      - user
securityDefinitions:
  "":
    description: JWT token for authentication
    in: header
    name: token
    type: apiKey
swagger: "2.0"
